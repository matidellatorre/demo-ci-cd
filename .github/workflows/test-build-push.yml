name: Demo CI-CD
on:
    push:
        branches:
            - main
jobs:
    test-and-build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18.x"
            - name: Install dependencies
              run: yarn
            - name: Run tests
              run: yarn test
            - name: Build the project
              run: yarn build
            - name: Notify Slack on 'Test and Build' failure
              if: failure()
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_COLOR: "#FF0000"
                  SLACK_TITLE: "‚ùå Test and Build Job Failed"
                  SLACK_MESSAGE: |
                      The 'test-and-build' job failed.
                      Repo: ${{ github.repository }}
                      Commit: ${{ github.sha }}
                      Author: ${{ github.actor }}
                      See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    push-docker-image:
        needs: test-and-build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: |
                      ${{ secrets.DOCKERHUB_USERNAME }}/demo-ci-cd:latest
                      ${{ secrets.DOCKERHUB_USERNAME }}/demo-ci-cd:${{ github.sha }}
            - name: Notify DockerHub push success
              if: success()
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_COLOR: "#36a64f"
                  SLACK_TITLE: "üì¶ Image pushed to DockerHub"
                  SLACK_MESSAGE: |
                      Docker Image pushed to DockerHub successfully.
                      Repo: ${{ github.repository }}
                      Image: ${{ secrets.DOCKERHUB_USERNAME }}/demo-ci-cd:latest
            - name: Notify Slack on 'Push Docker Image' failure
              if: failure()
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_COLOR: "#FF0000"
                  SLACK_TITLE: "‚ùå Push Docker Image Job Failed"
                  SLACK_MESSAGE: |
                      The 'push-docker-image' job failed.
                      Repo: ${{ github.repository }}
                      Commit: ${{ github.sha }}
                      Author: ${{ github.actor }}
                      See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    deploy-to-ec2:
        needs: push-docker-image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Deploy to EC2
              uses: appleboy/ssh-action@v0.1.0
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  port: 22
                  script: |
                      echo ${{ secrets.DOCKERHUB_TOKEN }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
                      
                      # Pull the specific tagged image (using commit SHA)
                      sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo-ci-cd:${{ github.sha }}

                      # Stop and remove the old container if it exists
                      if sudo docker ps -q --filter "name=demo-ci-cd-app" | grep -q .; then
                          echo "Stopping existing container..."
                          sudo docker stop demo-ci-cd-app
                          sudo docker rm demo-ci-cd-app
                      fi

                      # Run the new container in detached mode with a name
                      sudo docker run -d -p 80:3000 --name demo-ci-cd-app ${{ secrets.DOCKERHUB_USERNAME }}/demo-ci-cd:${{ github.sha }}
            - name: Notify EC2 deploy success
              if: success()
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_COLOR: "#2eb886"
                  SLACK_TITLE: "üöÄ Deployed to Staging"
                  SLACK_MESSAGE: |
                      Deploy to Staging successfully.
                      Repo: ${{ github.repository }}
                      Commit: ${{ github.sha }}
            - name: Notify Slack on 'Deploy to EC2' failure
              if: failure()
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_COLOR: "#FF0000"
                  SLACK_TITLE: "‚ùå Deploy to EC2 Job Failed"
                  SLACK_MESSAGE: |
                      The 'deploy-to-ec2' job failed.
                      Repo: ${{ github.repository }}
                      Commit: ${{ github.sha }}
                      Author: ${{ github.actor }}
                      See: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}